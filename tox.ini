[tox]
envlist =
    lint,
    update-readme,
    build,
    py37,
    py38,
    py39,
    py310,
    py311,

[testenv]
basepython =
    {clean,build,report,codecov,lint}: {env:TOXPYTHON:python3}
parallel_show_output=true
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
    # Compatible with "tox --parallel" to avoid concurrency
    COVERAGE_FILE={toxinidir}/.coverage.{envname}
    COVERAGE_CONTEXT={envname}
passenv =
    *
deps = -r{toxinidir}/test-requirements.txt
usedevelop = true
commands =
    pytest -s --cov --cov-report=term-missing -vv {posargs:}

[testenv:update-readme]
basepython = {env:TOXPYTHON:python3.10}
setenv =
    {[testenv]setenv}
    BUILD_README=true
usedevelop = true
commands =
    {posargs:pytest -svvk test_build_docstring}
deps =
    {[testenv]deps}

[testenv:lint]
skip_install = true
commands =
    pre-commit run --all-files --show-diff-on-failure --color=always

[testenv:build]
skip_install = true
deps =
    build
    bump2version
    twine
    wheel
commands =
    python -m build --sdist --wheel --outdir dist_wo_pbr/
    python -c "import shutil;shutil.rmtree('dist/', ignore_errors=True)"
    python -m build --no-isolation --sdist --wheel --outdir dist/  # Generate ChangeLog with pbr
    python -m twine check --strict dist/*
    bump2version patch --allow-dirty --no-commit --no-tag --dry-run --verbose
    # Install packages from binaries to test if all files were already included in the compressed file
    python -c '''import sys,pip,os,glob;os.chdir("dist");sys.argv = ["", "install", "-U", "--force-reinstall", glob.glob("*.tar.gz")[-1], "--use-feature=no-binary-enable-wheel-cache"];pip.main()'''
    # Testing the package is importing the dependencies well
    python -c '''from pylint.lint import Run;import os;os.chdir("dist");res = Run(["--load-plugins=pylint_odoo", "-c", "non-exists.cfg", "--disable=all", "--enable=odoolint", "--list-msgs-enabled"])'''

[testenv:codecov]
deps =
    codecov
skip_install = true
commands =
    codecov []

[testenv:report]
deps = coverage
skip_install = true
setenv =
    COVERAGE_FILE = {toxinidir}/.coverage
commands =
    # Workaround https://github.com/tox-dev/tox/issues/1571
    python -c 'from glob import glob; import subprocess; [subprocess.check_call(["coverage", "combine", "--keep", i]) for i in glob(".coverage.*")]'
    coverage report --fail-under=0  # The next command will fail instead but will allow to see the html report
    coverage html

[testenv:clean]
commands = coverage erase
skip_install = true
deps = coverage

[testenv:py37]
basepython = {env:TOXPYTHON:python3.7}

[testenv:py38]
basepython = {env:TOXPYTHON:python3.8}

[testenv:py39]
basepython = {env:TOXPYTHON:python3.9}

[testenv:py310]
basepython = {env:TOXPYTHON:python3.10}

[testenv:py311]
basepython = {env:TOXPYTHON:python3.11}
